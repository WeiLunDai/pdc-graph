# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: gcc

meson:
  # stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script:
      - apt update
      - apt -y install meson libgtkmm-3.0-dev libgraphviz-dev libgtest-dev
  #   - apt update && apt -y install make autoconf
  script:
    - meson builddir 
    - cd ./builddir
    - ninja
    - ninja test

cmake:
  # stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script:
      - apt update
      - apt -y install meson libgtkmm-3.0-dev libgraphviz-dev libgtest-dev
  #   - apt update && apt -y install make autoconf
  script:
    - mkdir build
    - cd ./build
    - cmake -G "Ninja" ..
    - ninja

  #artifacts:
    #paths:
      #- mybinary
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      # cache:
      #   paths:
      #     - "*.o"

# run tests using the binary built before
# test:
#   # stage: test
#   before_script:
#       - apt update
#       - apt -y install meson libgtkmm-3.0-dev graphviz ninja-build libcgraph6
#   script:
#     - ninja test
